/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.artlist_creator.dev;

import com.artlist_creator.dev.model.*;
import com.artlist_creator.dev.contents.Contents;

import java.awt.CardLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author Camer
 */
public class Canvas extends javax.swing.JFrame implements Runnable, ActionListener {

    List<Question> Q_List;
    Map<Question, QuestionPanel> Q_Comp = new HashMap<>();
    Map<JButton, Question> Q_Buttons = new HashMap<>();
    private short count = 10; private boolean isFinished = false;
    private String leftTime;
    private int score = 0, avail_score;
    private final int MAX_SCORE= 100;

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Canvas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Canvas().setVisible(true);
            }
        });
    }
    
    /**
     * Creates new form Canvas
     */
    public Canvas() {
        initComponents();
        finish.setEnabled(false);
        setResizable(false);
        q_sec.setLayout(new CardLayout());
        q_Indicator.setLayout(new BoxLayout(q_Indicator,BoxLayout.Y_AXIS));
        Q_List = new Contents().getData();
        for(int i = 0, n = Q_List.size(); i < n ; i ++)
        {
            Question q = Q_List.get(i);
            //Create a new question sub-panel
            QuestionPanel qp = new QuestionPanel(q);
            //Add ques and ques-panel to comp-dict
            Q_Comp.put(q, qp);
            //Add ID and sub-panel to this canvas
            q_sec.add(q.getId()+"", qp);
            
            //Create new btn indicate quest number
            JButton btnNum = new JButton("" + (i+1));
            //Add it to buttons dict
            Q_Buttons.put(btnNum, q);
            //add it to indicator sub-panel
            q_Indicator.add(btnNum);
            
            btnNum.addActionListener(this);

            q.getAnswers().stream().filter(Answer::isCorrect).forEach(k -> avail_score ++);
        }
        displayQuestion(Q_List.get(0));
        Thread t = new Thread(this);
        t.start();
    }

    public void displayQuestion(Question q)
    {
        CardLayout layout = (CardLayout) q_sec.getLayout();
        layout.show(q_sec, q.getId() + "");
        q_Quest.setText( "Question "+q.getId() + "");
    }
    
    @Override
    public void run() {
        while (count >= 0) {
            updateTime();
            count--;
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(Canvas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(!isFinished) {
            getTotScore();
            ResultDialog res = new ResultDialog();
            res.setScore(score);
            res.setVisible(true);
            dispose();
        }
    }

    private void updateTime() {
        int hour = count / 3600,
                minutes = count % 3600 / 60,
                secs = count % 60;
        leftTime = "Time left " + hour + ":" + minutes + ":" + secs;
        Timer.setText(leftTime);

    }

    private void getTotScore()
    {
        Q_Comp.values().forEach(k -> score += k.getScore());
        score = (int)(Math.round(score * 1.0 /avail_score * MAX_SCORE));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Timer = new javax.swing.JLabel();
        q_Quest = new javax.swing.JLabel();
        q_sec = new javax.swing.JPanel();
        JPanel q_buttons = new JPanel();
        verified = new javax.swing.JCheckBox();
        finish = new javax.swing.JButton();
        q_Indicator = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Silly Questions");
        setBackground(new java.awt.Color(171, 177, 198));
        setFont(new java.awt.Font("Roboto", 0, 10)); // NOI18N

        Timer.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        Timer.setText("Timer: ");

        q_Quest.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        q_Quest.setText("Question: ");

        q_sec.setLayout(new java.awt.CardLayout());

        verified.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        verified.setText("Done");
        verified.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifiedActionPerformed(evt);
            }
        });
        finish.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                finishActionPerformed(actionEvent);
            }
        });
        q_buttons.add(verified);

        finish.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        finish.setText("Finish");
        q_buttons.add(finish);

        javax.swing.GroupLayout q_IndicatorLayout = new javax.swing.GroupLayout(q_Indicator);
        q_Indicator.setLayout(q_IndicatorLayout);
        q_IndicatorLayout.setHorizontalGroup(
            q_IndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 77, Short.MAX_VALUE)
        );
        q_IndicatorLayout.setVerticalGroup(
            q_IndicatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 266, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(q_buttons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(q_Quest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Timer)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(q_Indicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(q_sec, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Timer)
                    .addComponent(q_Quest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(q_sec, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(q_Indicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(q_buttons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void verifiedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifiedActionPerformed
        // TODO add your handling code here:
        if (verified.isSelected()) {
            finish.setEnabled(true);
        }
        else {
            finish.setEnabled(false);
        }
    }//GEN-LAST:event_verifiedActionPerformed

    private void  finishActionPerformed(ActionEvent e)
    {

        var dialog = new ResultDialog(leftTime);
        isFinished = true;
        getTotScore();
        dialog.setScore(score);
        dialog.setVisible(true);
        dispose();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Timer;
    private javax.swing.JButton finish;
    private javax.swing.JPanel q_Indicator;
    private javax.swing.JLabel q_Quest;
    private javax.swing.JPanel q_sec;
    private javax.swing.JCheckBox verified;
    // End of variables declaration//GEN-END:variables


    @Override
    public void actionPerformed(ActionEvent e) {
        JButton btn = (JButton) e.getSource();
        Question q = Q_Buttons.get(btn);
        displayQuestion(q);
    }

}
